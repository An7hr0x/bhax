<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
            <mediaobject>
                <imageobject>
                    <imagedata fileref="elso/ciklus1.png" scale="20" />
                </imageobject>
            </mediaobject>

        </para>
        <para>
            Megoldás forrása:  
            <link xlink:href="elso/ciklus1.c">
                <filename>Prog1/repo/bhax/thematic_tutorials/bhax_textbook/elso/ciklus1.c</filename>
            </link>,<link xlink:href="elso/ciklus2.c">
                <filename>Prog1/repo/bhax/thematic_tutorials/bhax_textbook/elso/ciklus2.c</filename>
            </link>,<link xlink:href="elso/ciklus3.c">
                <filename>Prog1/repo/bhax/thematic_tutorials/bhax_textbook/elso/ciklus3.c</filename>
            </link>
              
        </para>
        <para>
            Egy szálat több féle képpen lehet végtelen ciklusokkal 100%-on futtatni, én a példában a while(1); végtelen ciklust használom, de lehetne for(;;) ciklussal is csinálni mint ahogy a következő
            példám is mutatni fogja.
            <programlisting language="c"><![CDATA[#include  <stdio.h>

int main (){
	
	while(1);

	return 0;
}
]]>
</programlisting> 
  
  Ebben a példában egy szálat a for(;;) végtelen ciklus segítségével 0%-on fogom "pörgetni", mégpedig úgy, hogy a ciklusba beleteszünk egy sleep(1) parancsot, amely azt eredményezi hogy a ciklus
  végtelenszer 1mp-re sleep-be teszi a szálat, igy 0% on marad amíg fut a programunk.
   <programlisting language="c"><![CDATA[#include <unistd.h>
int main () {
  
    for (;;)
    sleep(1);
    
  return 0;
}
]]>
        </programlisting> 
        
    Végül, OpenMP használatával elérhetjük azt is hogy minden szálunkat 100%-on futtassuk, mivel az OpenMP szálankénti program futásra is használható.
    <programlisting language="c"><![CDATA[#include <omp.h>
int main () {
        
#pragma omp parallel
{
  for (;;);
}
  return 0;
}
        
]]>
        </programlisting>  

        Azt, hogy mely szálak hány %-on futnak, a <command>top</command> parancs segítségével ellenőrizhetjük.
  
        </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne végtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat.:
            
            Tehát ha létezne ilyen program akkor 50% ban tökéletesen működik, mert ha nem fagy le, akkor kiírja hogy nem fagyott le a program tehát azt hogy true.
            Viszont, ha a program lefagyós, akkor nem fog kiírni semmit, így nem kapunk false visszajelzést. De a feltételezéseink ből kiindulva ha nem kapunk outputot, se true-t
            se false-t akkor jön az a feltevés, hogy végtelen ciklusunk van, mert nem fut le a programunk.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  
            <link xlink:href="elso/valtozo1.c">
                <filename>Prog1/repo/bhax/thematic_tutorials/bhax_textbook/elso/valtozo1.c</filename>
            </link> ,
            <link xlink:href="elso/valtozo2.c">
                <filename>Prog1/repo/bhax/thematic_tutorials/bhax_textbook/elso/valtozo2.c</filename>
            </link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
            
            A változók értékének felcserélésére sok módszer van talán a két legegyszerűbb, és amit mindenhol alapvetőként mutatnak a segédváltozó használatával és azok használata 
            nélkül történő változó érték felcserélés. A segédváltozó a kettő közül is talán a könnyebbik, csak "felesleges" változót vezetünk be ennek a módszernek a használatával,
            és még a memóriában is több helyet foglal igy, ami a mai korban kis programokban nem probléma, mivel van bőven erőforrás. A segédváltozó nélküli módszerben először az egyik változó értékét hozzáadjuk
            a másik változóhoz, majd a kapott összegből kivonjuk a változatlan változó értékét és igy az egyik csere meg is történt, majd végső lépésként kivonjuk a kapott összegből a kicserélt változó értékét, és ezek után fel is lett cserélve mindkettő változó.

            <programlisting language="java"><![CDATA[
        #include <stdio.h>

int main() {
	
	int a = 11;
	int b = 22;

	a=a+b;
	b=a-b;
	a=a-b;

	printf("A= %d B= %d \n",a,b );

	return 0;

	}
        
            }]]></programlisting>
            
            
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="elso/pattog2.png" scale="20" />
                </imageobject>
            </mediaobject>
        </para>
        <para>
            Megoldás forrása:  
            <link xlink:href="elso/pattog1.c">
                <filename>Prog1/repo/bhax/thematic_tutorials/bhax_textbook/elso/pattog1.c</filename>
            </link>,
            <link xlink:href="elso/pattog2.c">
                <filename>Prog1/repo/bhax/thematic_tutorials/bhax_textbook/elso/pattog2.c</filename>
            </link>
            
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat.:
            Két módszert fogunk megnézni, először az if-eket használót, és egy másikat amikor if-ek nélkül oldjuk meg. AZ if-es program lényege, hogy folyamatosan vizsgálja
            4 if utasítás hogy a labda elérte-e az ablakunk valamelyik szélét, és ha elérte akkor irányt változtat a labdának. Mindkettőnek van előnye és hátránya, az if-esnek előnye hogy bárhogy húzzuk
            az ablakot, az aktuális méretet veszi figyelembe pattogás szempontjából, míg az if nélküli verzióban hardcoded az ablak mérete. AZ if nélküli nehezebbnek tűnhet elsőre, de nem az ha átfutjuk az agyunkban hogyan is tér el az if-estől.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="elso/bogo.png" scale="20" />
                </imageobject>
            </mediaobject>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="elso/szohossz.c">
                <filename>Prog1/repo/bhax/thematic_tutorials/bhax_textbook/elso/szohossz.c</filename>
            </link> , <link xlink:href="elso/bogomips.c">
                <filename>Prog1/repo/bhax/thematic_tutorials/bhax_textbook/elso/bogomips.c</filename>
            </link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat.:
            A szóhossz programunk, megadja a maximális int méretet a gépünkön azzal a módszerrel hogy felvesz egy változót, és addig shifteli a változó értékét, míg a sok shiftelés miatt az értéke nem lesz nulla, tehát addig töltjük nullákkal mig egy nagy nulla lesz az egész.
            Ha a 0-át elérte az értéke, akkor a shiftelések számából megtudjuk hogy hány bites a szó a gépünkön, azaz mekkora az int mérete.
        </para>
        <para>
            Következő a BogoMIPS, mely egy olyan program melyet Linus Torvalds írt, amikor elkészítette a saját kerneljét. A feladata a programnak hogy a számítógép teljesítményét ellenőrizze. Mint kiderült, a program sajnos jobban hagyakszik a gyorsítótár és az I/O sebességére mint az órajelre,
            ami jobban tükrözné a tényleges teljesítményt.A program a tickenként történt maximális végrehajtásokból számából számitja ki a teljesitményt, melyre az időkorlát 1 másodperc.
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="elso/pr.c">
                <filename>Prog1/repo/bhax/thematic_tutorials/bhax_textbook/elso/pr.c</filename>
            </link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat.:
            
            Az algoritmust Larry Page és Sergey Brin fejlesztette ki 1988-ban, ez az algoritmus a Google keresőszolgáltatás "szíve" mivel, ez befolyásolja a Googleben történt keresések során a találat listát. 
            Működése a következő, az volt a gondolatmenet, hogy ha egy weboldalra, minél több másik weboldalról mutat link, akkor biztos népszerű, ezért előrébb van a listában a helye, de azt is figyelembe veszi az algoritmus,
            hogy azokra az oldalakra mennyi weboldal mutat, amelyek rámutatnak egy másikra, lényeg hogy rekurzió van jelen.Igy minden oldal kap egy rankot, arról hogy mennyire fontos. 
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        
        <para>
            Brun tétele, miszerint az ikerprímek (olyan prímpár, amelyek különbsége 2) reciprokösszege egy Brun-konstans néven ismert (B2-tal jelölt) véges értékhez konvergál.
            A tételt Viggo Brun bizonyította be 1919-ben, és jelentős fontossággal bír a szita eljárások terén. Érdekesség, hogy a Google a Nortel szabvány licitálásakor, a 1.902.160.540 konstans szerinti áron vették meg. Brun tétel az ikerprímek egyik alapköve a matematikában.
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>A Monty Hall problémáról először talán a Numberphile yoputube csatornáján hallottam jó pár éve, azótais érdekesnek találom, és egyben lenyűgözőnek ezt a problémát. A probléma alapfeltevése, hogy egy játék show ban vagyunk, ahol a műsorvezető felajánlja hogy válasszunk a 
        3 ajtó közül egyet. 2 ajtó mögött egy kecske van, és a maradék egy mögött meg egy új autó. Az első választás teljesen mindegy a probléma szempontjából, mert 1/3 esélyünk van a nyerésre. Miután kiválasztottuk, a műsorvezető kinyit egy ajtót ami mögött biztosan az egyik kecske van, és megkérdi tőlünk, szeretnénk-e a 
        döntésünket megváltoztatni, és a másik ajtót választani. Sokan úgy gondolják hogy még mindig 1/3 az esélye hogy nyerünk, de csak akkor, ha nem váltunk. Ha ajtót váltunk, már 2/3-lesz, tehát nagyobbak az esélyeink és érdemes váltani mindig. Az R szimuláció pont ezt a problémát modellezi.</para>
    </section>

</chapter>                


